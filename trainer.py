#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import threading
import time
import random
import webbrowser
import json
import os
from datetime import datetime
from flask import Flask, render_template, request, jsonify
import platform

class BashTrainerPro:
    def __init__(self):
        self.data_file = "trainer_data.json"
        self.settings_file = "trainer_settings.json"
        self.commands_file = "commands.json"
        self.commands = self.load_commands_from_file()
        self.current_reminder = None
        self.settings = self.load_settings()
        self.stats = self.load_stats()
        self.command_history = []
        self.manual_skip = False
        
    def load_commands_from_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.commands_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('commands', []))} –∫–æ–º–∞–Ω–¥")
                return data.get('commands', [])
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {self.commands_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ {self.commands_file}!")
            return []
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        default_settings = {
            "reminder_interval": 300,  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            "sound_enabled": True,
            "auto_advance": True
        }
        
        try:
            with open(self.settings_file, 'r', encoding='utf-8') as f:
                user_settings = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return {**default_settings, **user_settings}
        except FileNotFoundError:
            print("‚öôÔ∏è  –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return default_settings
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫!")
            return default_settings
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        with open(self.settings_file, 'w', encoding='utf-8') as f:
            json.dump(self.settings, f, indent=2, ensure_ascii=False)
    
    def load_stats(self):
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                pass
        return {"completed": [], "attempts": {}, "last_completion": {}}
    
    def save_stats(self):
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.stats, f, indent=2, ensure_ascii=False)
    
    def update_settings(self, new_settings):
        """–û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings.update(new_settings)
        self.save_settings()
        print("‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", self.settings)
    
    def mark_completed(self, command, play_sound=False):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        if command not in self.stats["completed"]:
            self.stats["completed"].append(command)
        
        self.stats["attempts"][command] = self.stats["attempts"].get(command, 0) + 1
        self.stats["last_completion"][command] = datetime.now().isoformat()
        self.save_stats()
        
        # –ü–æ—Å–ª–µ –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        self.get_new_reminder(play_sound=play_sound)
    
    def get_new_reminder(self, play_sound=True):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
        if not self.commands:
            return None
            
        available_commands = [cmd for cmd in self.commands if cmd["command"] not in self.stats["completed"]]
        
        if not available_commands:
            # –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
            print("üéâ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑—É—á–µ–Ω—ã! –í—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã!")
            self.current_reminder = {
                "command": "–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!",
                "description": "–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∫—É—Ä—Å–∞!",
                "example": "–ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                "category": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ",
                "difficulty": "–ª–µ–≥–∫–∞—è",
                "flags": "üéì",
                "output_example": "–í—ã —Å—Ç–∞–ª–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –∫–æ–º–∞–Ω–¥–∞—Ö Linux!",
                "analysis": "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –∏ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã!"
            }
            return self.current_reminder
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        self.current_reminder = random.choice(available_commands)
        self.add_to_history(self.current_reminder)
        
        if play_sound and self.settings["sound_enabled"]:
            self.play_sound()
        
        print(f"\nüéØ –ù–û–í–û–ï –ó–ê–î–ê–ù–ò–ï ({datetime.now().strftime('%H:%M:%S')})")
        print(f"üíª –ö–æ–º–∞–Ω–¥–∞: {self.current_reminder['command']}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {self.current_reminder['description']}")
        print(f"üîß –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {self.current_reminder['category']}")
        print("-" * 60)
        
        return self.current_reminder
    
    def add_to_history(self, command):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        self.command_history = [cmd for cmd in self.command_history if cmd["command"] != command["command"]]
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        self.command_history.insert(0, command)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self.command_history = self.command_history[:10]
    
    def play_sound(self):
        """–ö—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π –∑–≤—É–∫"""
        try:
            if platform.system() == "Windows":
                import winsound
                winsound.Beep(1000, 500)
            else:
                # –î–ª—è Linux/Mac
                os.system('echo -e "\\a"')
        except:
            print("\a")  # Fallback

    def start_reminders(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        def reminder_loop():
            while True:
                if self.commands and not self.manual_skip and self.settings["auto_advance"]:
                    self.get_new_reminder(play_sound=self.settings["sound_enabled"])
                
                self.manual_skip = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
                time.sleep(self.settings["reminder_interval"])
        
        thread = threading.Thread(target=reminder_loop, daemon=True)
        thread.start()

app = Flask(__name__)
trainer = BashTrainerPro()

@app.route('/')
def index():
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ
    if not trainer.current_reminder and trainer.commands:
        trainer.get_new_reminder(play_sound=False)
    
    return render_template('index.html',
                         current_reminder=trainer.current_reminder,
                         commands=trainer.commands,
                         stats=trainer.stats,
                         settings=trainer.settings,
                         command_history=trainer.command_history)

@app.route('/mark_completed', methods=['POST'])
def mark_completed():
    data = request.get_json()
    command = data['command']
    
    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ë–ï–ó –∑–≤—É–∫–∞
    trainer.mark_completed(command, play_sound=False)
    
    return jsonify({"status": "success", "message": f"–ö–æ–º–∞–Ω–¥–∞ {command} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è"})

@app.route('/play_sound')
def play_sound():
    trainer.play_sound()
    return jsonify({"status": "sound_played"})

@app.route('/skip_reminder')
def skip_reminder():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    trainer.manual_skip = True
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ë–ï–ó –∑–≤—É–∫–∞
    trainer.get_new_reminder(play_sound=False)
    
    return jsonify({"status": "skipped", "message": "–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"})

@app.route('/update_settings', methods=['POST'])
def update_settings():
    data = request.get_json()
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    if 'reminder_interval' in data:
        data['reminder_interval'] = int(data['reminder_interval'])
    if 'sound_enabled' in data:
        data['sound_enabled'] = bool(data['sound_enabled'])
    if 'auto_advance' in data:
        data['auto_advance'] = bool(data['auto_advance'])
    
    trainer.update_settings(data)
    
    return jsonify({"status": "success", "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "settings": trainer.settings})

@app.route('/reset_progress', methods=['POST'])
def reset_progress():
    """–°–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    trainer.stats = {"completed": [], "attempts": {}, "last_completion": {}}
    trainer.save_stats()
    trainer.get_new_reminder(play_sound=False)
    
    return jsonify({"status": "success", "message": "–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω"})

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–º–∞–Ω–¥
    if not trainer.commands:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ commands.json")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    trainer.start_reminders()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Bash Trainer Pro...")
    print("üìñ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
    print("üìö –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", len(trainer.commands))
    print("‚öôÔ∏è  –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {trainer.settings['reminder_interval']} —Å–µ–∫ ({trainer.settings['reminder_interval']//60} –º–∏–Ω)")
    print(f"   ‚Ä¢ –ó–≤—É–∫: {'–í–ö–õ' if trainer.settings['sound_enabled'] else '–í–´–ö–õ'}")
    print(f"   ‚Ä¢ –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥: {'–í–ö–õ' if trainer.settings['auto_advance'] else '–í–´–ö–õ'}")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    print("\n" + "="*50)
    
    try:
        app.run(debug=False, host='127.0.0.1', port=5000, use_reloader=False)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()